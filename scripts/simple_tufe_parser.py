#!/usr/bin/env python3
"""
Simple T√úFE data parser and saver
"""

import requests
import xml.etree.ElementTree as ET
import sqlite3
import json
from datetime import datetime
import os

def create_tufe_database():
    """Create a simple T√úFE database"""
    
    # Create data directory if it doesn't exist
    os.makedirs("data", exist_ok=True)
    
    # Connect to database
    conn = sqlite3.connect("data/tufe_data.db")
    cursor = conn.cursor()
    
    # Create table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tufe_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            year INTEGER NOT NULL,
            month INTEGER NOT NULL,
            period TEXT NOT NULL,
            tufe_rate REAL NOT NULL,
            source TEXT DEFAULT 'OECD SDMX API',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(year, month)
        )
    """)
    
    conn.commit()
    return conn

def parse_tufe_data():
    """Parse T√úFE data from OECD API"""
    
    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö T√úFE –∏–∑ OECD API")
    print("=" * 50)
    print()
    
    # Try to get data from OECD API
    print("üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OECD API...")
    
    # Use a smaller date range to avoid rate limiting
    url = "https://stats.oecd.org/restsdmx/sdmx.ashx/GetData/PRICES_CPI/A.TUR.CPALTT01.M/all?startTime=2020-01&endTime=2023-12"
    
    try:
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(response.text):,} –±–∞–π—Ç)")
            
            # Parse XML
            root = ET.fromstring(response.text)
            observations = root.findall('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}Obs')
            
            # Filter for Turkey monthly CPI data with percentage annual (PA) unit
            turkey_data = []
            
            for obs in observations:
                obs_key = obs.find('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}ObsKey')
                if obs_key is None:
                    continue
                
                # Extract dimensions
                dimensions = {}
                for value in obs_key.findall('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}Value'):
                    dim_id = value.get('id')
                    dim_value = value.get('value')
                    dimensions[dim_id] = dim_value
                
                # Check if this is Turkey monthly CPI data with percentage annual (PA) unit
                if (dimensions.get('REF_AREA') == 'TUR' and 
                    dimensions.get('FREQ') == 'M' and  # Monthly
                    dimensions.get('MEASURE') == 'CPI' and  # Consumer Price Index
                    dimensions.get('UNIT_MEASURE') == 'PA'):  # Percentage Annual
                    
                    obs_value = obs.find('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}ObsValue')
                    if obs_value is not None:
                        value = float(obs_value.get('value'))
                        period = dimensions.get('TIME_PERIOD')
                        
                        # Parse period (format: YYYY-MM)
                        try:
                            year, month = period.split('-')
                            year = int(year)
                            month = int(month)
                            
                            turkey_data.append({
                                'year': year,
                                'month': month,
                                'period': period,
                                'value': value
                            })
                        except ValueError:
                            continue
            
            if turkey_data:
                # Sort by year and month
                turkey_data.sort(key=lambda x: (x['year'], x['month']))
                
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(turkey_data)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                print()
                
                # Show sample data
                print("   üìà –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                for data in turkey_data[:5]:
                    month_name = datetime(data['year'], data['month'], 1).strftime('%B')
                    print(f"      {month_name} {data['year']}: {data['value']:.2f}%")
                
                if len(turkey_data) > 5:
                    print(f"      ... –∏ –µ—â–µ {len(turkey_data) - 5} –∑–∞–ø–∏—Å–µ–π")
                
                return turkey_data
                
            else:
                print("   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
                
        elif response.status_code == 429:
            print(f"   ‚ùå –ó–∞–±–∞–Ω–µ–Ω—ã (429)")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.text[:100]}")
            return None
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def save_tufe_data(turkey_data):
    """Save T√úFE data to database"""
    
    if not turkey_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return False
    
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # Create database
    conn = create_tufe_database()
    cursor = conn.cursor()
    
    saved_count = 0
    for data in turkey_data:
        try:
            # Insert data
            cursor.execute("""
                INSERT OR REPLACE INTO tufe_data (year, month, period, tufe_rate, source)
                VALUES (?, ?, ?, ?, ?)
            """, (
                data['year'],
                data['month'],
                data['period'],
                data['value'],
                'OECD SDMX API'
            ))
            saved_count += 1
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {data['period']}: {e}")
    
    conn.commit()
    conn.close()
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π")
    print()
    
    # Show summary
    print("üìä –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 40)
    
    years = set(d['year'] for d in turkey_data)
    for year in sorted(years):
        year_data = [d for d in turkey_data if d['year'] == year]
        values = [d['value'] for d in year_data]
        avg_value = sum(values) / len(values)
        print(f"   {year}: {len(year_data)} –º–µ—Å—è—Ü–µ–≤, —Å—Ä–µ–¥–Ω–µ–µ: {avg_value:.2f}%")
    
    print()
    print("üéØ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    print("   –§–∞–π–ª: data/tufe_data.db")
    print("   –¢–µ–ø–µ—Ä—å –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
    
    return True

def show_saved_data():
    """Show saved T√úFE data"""
    
    print("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 40)
    
    try:
        conn = sqlite3.connect("data/tufe_data.db")
        cursor = conn.cursor()
        
        # Get all data
        cursor.execute("SELECT * FROM tufe_data ORDER BY year, month")
        rows = cursor.fetchall()
        
        if rows:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π:")
            print()
            print("Year | Month | Period   | T√úFE Rate | Source")
            print("-" * 50)
            
            for row in rows:
                year, month, period, tufe_rate, source, created_at = row[1:7]
                month_name = datetime(year, month, 1).strftime('%b')
                print(f"{year:4} | {month:5} | {period:8} | {tufe_rate:8.2f}% | {source}")
        else:
            print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def main():
    """Main function"""
    
    print("üîç T√úFE Data Parser and Saver")
    print("=" * 40)
    print()
    
    # Check if we already have data
    if os.path.exists("data/tufe_data.db"):
        print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        show_saved_data()
        print()
        
        choice = input("–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower()
        if choice != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    # Parse data
    turkey_data = parse_tufe_data()
    
    if turkey_data:
        # Save data
        save_tufe_data(turkey_data)
        
        # Show saved data
        print()
        show_saved_data()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print()
        print("üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        print("-" * 30)
        print("1. –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TCMB API (–µ—Å–ª–∏ –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        print("3. –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤")
        print("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö CSV —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()
