#!/usr/bin/env python3
"""
Parse T√úFE data from OECD API once and save to database
"""

import requests
import xml.etree.ElementTree as ET
import sqlite3
import time
from datetime import datetime
import sys
import os

# Add src to path to import our models
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from storage.data_store import DataStore
from models.inflation_data import InflationData

def parse_and_save_tufe_data():
    """Parse T√úFE data once and save to database"""
    
    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö T√úFE –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    print()
    
    # Initialize database
    db_path = "data/rental_negotiation.db"
    data_store = DataStore(db_path)
    
    print("üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    print(f"   –ü—É—Ç—å: {db_path}")
    
    # Check if we already have T√úFE data
    existing_data = data_store.get_inflation_data()
    if existing_data:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_data)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # Show existing data
        print("   üìà –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        for data in existing_data[-5:]:  # Show last 5
            print(f"      {data.year}: {data.tufe_rate}%")
    else:
        print("   üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
    
    print()
    
    # Try to get data from OECD API
    print("üåê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ OECD API...")
    
    # Use a smaller date range to avoid rate limiting
    url = "https://stats.oecd.org/restsdmx/sdmx.ashx/GetData/PRICES_CPI/A.TUR.CPALTT01.M/all?startTime=2020-01&endTime=2023-12"
    
    try:
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(response.text):,} –±–∞–π—Ç)")
            
            # Parse XML
            root = ET.fromstring(response.text)
            observations = root.findall('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}Obs')
            
            # Filter for Turkey monthly CPI data with percentage annual (PA) unit
            turkey_data = []
            
            for obs in observations:
                obs_key = obs.find('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}ObsKey')
                if obs_key is None:
                    continue
                
                # Extract dimensions
                dimensions = {}
                for value in obs_key.findall('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}Value'):
                    dim_id = value.get('id')
                    dim_value = value.get('value')
                    dimensions[dim_id] = dim_value
                
                # Check if this is Turkey monthly CPI data with percentage annual (PA) unit
                if (dimensions.get('REF_AREA') == 'TUR' and 
                    dimensions.get('FREQ') == 'M' and  # Monthly
                    dimensions.get('MEASURE') == 'CPI' and  # Consumer Price Index
                    dimensions.get('UNIT_MEASURE') == 'PA'):  # Percentage Annual
                    
                    obs_value = obs.find('.//{http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic}ObsValue')
                    if obs_value is not None:
                        value = float(obs_value.get('value'))
                        period = dimensions.get('TIME_PERIOD')
                        
                        # Parse period (format: YYYY-MM)
                        try:
                            year, month = period.split('-')
                            year = int(year)
                            month = int(month)
                            
                            turkey_data.append({
                                'year': year,
                                'month': month,
                                'period': period,
                                'value': value
                            })
                        except ValueError:
                            continue
            
            if turkey_data:
                # Sort by year and month
                turkey_data.sort(key=lambda x: (x['year'], x['month']))
                
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(turkey_data)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                print()
                
                # Show sample data
                print("   üìà –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                for data in turkey_data[:5]:
                    month_name = datetime(data['year'], data['month'], 1).strftime('%B')
                    print(f"      {month_name} {data['year']}: {data['value']:.2f}%")
                
                if len(turkey_data) > 5:
                    print(f"      ... –∏ –µ—â–µ {len(turkey_data) - 5} –∑–∞–ø–∏—Å–µ–π")
                
                print()
                
                # Save to database
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                
                saved_count = 0
                for data in turkey_data:
                    try:
                        # Create InflationData object
                        inflation_data = InflationData(
                            year=data['year'],
                            tufe_rate=data['value'],
                            source="OECD SDMX API",
                            notes=f"Parsed from OECD API on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                        )
                        
                        # Save to database
                        data_store.save_inflation_data(inflation_data)
                        saved_count += 1
                        
                    except Exception as e:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {data['period']}: {e}")
                
                print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π")
                print()
                
                # Show summary
                print("üìä –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                print("-" * 40)
                
                years = set(d['year'] for d in turkey_data)
                for year in sorted(years):
                    year_data = [d for d in turkey_data if d['year'] == year]
                    values = [d['value'] for d in year_data]
                    avg_value = sum(values) / len(values)
                    print(f"   {year}: {len(year_data)} –º–µ—Å—è—Ü–µ–≤, —Å—Ä–µ–¥–Ω–µ–µ: {avg_value:.2f}%")
                
                print()
                print("üéØ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                print("   –¢–µ–ø–µ—Ä—å –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
                print("   –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ OECD API")
                
                return True
                
            else:
                print("   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        elif response.status_code == 429:
            print(f"   ‚ùå –ó–∞–±–∞–Ω–µ–Ω—ã (429)")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.text[:100]}")
            print()
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   ‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –¥–ª—è —Å–º–µ–Ω—ã IP")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()
    print("üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
    print("-" * 30)
    print("1. –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TCMB API (–µ—Å–ª–∏ –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    print("3. –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤")
    print("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö CSV —Ñ–∞–π–ª–æ–≤")
    
    return False

if __name__ == "__main__":
    parse_and_save_tufe_data()
